-- Migration 004: Test Seed Data
-- Event Ticketing System Test Data
-- Created: 2025-08-28
-- Description: Creates comprehensive test data for system testing
-- Includes: 3 test users (1 admin, 2 customers), 5 sample events, and several bookings

BEGIN;

-- Clear existing data (only if this is a test environment)
-- Uncomment the following lines if you want to start fresh
-- DELETE FROM tickets;
-- DELETE FROM bookings;
-- DELETE FROM events;
-- DELETE FROM users;

-- Insert 3 test users (1 admin, 2 customers)
INSERT INTO users (name, phone, role) VALUES 
    ('Admin Test', '+1555000001', 'admin'),
    ('Customer Alice', '+1555000002', 'customer'),
    ('Customer Bob', '+1555000003', 'customer')
ON CONFLICT (phone) DO NOTHING;

-- Insert 5 sample events with varied capacities and dates
INSERT INTO events (title, description, venue, date_time, capacity, price, status) VALUES 
    (
        'Future Tech Summit 2025', 
        'A comprehensive technology summit featuring AI, blockchain, and future innovations',
        'Convention Center Main Hall',
        '2025-12-15 09:00:00+00',
        1000,
        199.99,
        'active'
    ),
    (
        'Jazz & Blues Night', 
        'An intimate evening with renowned jazz and blues musicians',
        'Downtown Jazz Club',
        '2025-11-20 20:00:00+00',
        150,
        45.00,
        'active'
    ),
    (
        'Startup Pitch Competition', 
        'Watch emerging startups present their innovative solutions to investors',
        'Innovation Hub Auditorium',
        '2025-10-30 18:00:00+00',
        300,
        25.00,
        'active'
    ),
    (
        'Gourmet Cooking Workshop', 
        'Learn professional cooking techniques from Michelin-starred chefs',
        'Culinary Institute Kitchen Lab',
        '2025-11-05 14:00:00+00',
        20,
        120.00,
        'active'
    ),
    (
        'New Year Celebration Gala', 
        'Elegant New Year''s Eve celebration with dinner, entertainment, and fireworks',
        'Grand Ballroom Hotel Luxe',
        '2025-12-31 19:00:00+00',
        500,
        150.00,
        'active'
    )
ON CONFLICT DO NOTHING;

-- Get user IDs for bookings (assuming they were just inserted)
DO $$
DECLARE
    admin_id INTEGER;
    alice_id INTEGER;
    bob_id INTEGER;
    tech_summit_id INTEGER;
    jazz_night_id INTEGER;
    startup_pitch_id INTEGER;
    cooking_workshop_id INTEGER;
    new_year_gala_id INTEGER;
BEGIN
    -- Get user IDs
    SELECT id INTO admin_id FROM users WHERE phone = '+1555000001';
    SELECT id INTO alice_id FROM users WHERE phone = '+1555000002';
    SELECT id INTO bob_id FROM users WHERE phone = '+1555000003';
    
    -- Get event IDs
    SELECT id INTO tech_summit_id FROM events WHERE title = 'Future Tech Summit 2025';
    SELECT id INTO jazz_night_id FROM events WHERE title = 'Jazz & Blues Night';
    SELECT id INTO startup_pitch_id FROM events WHERE title = 'Startup Pitch Competition';
    SELECT id INTO cooking_workshop_id FROM events WHERE title = 'Gourmet Cooking Workshop';
    SELECT id INTO new_year_gala_id FROM events WHERE title = 'New Year Celebration Gala';
    
    -- Insert sample bookings to demonstrate functionality
    
    -- Customer Alice bookings
    INSERT INTO bookings (user_id, event_id, quantity, total_amount, status) VALUES 
        (alice_id, tech_summit_id, 2, 399.98, 'confirmed'),     -- Alice books 2 tickets for Tech Summit
        (alice_id, jazz_night_id, 4, 180.00, 'confirmed'),      -- Alice books 4 tickets for Jazz Night
        (alice_id, cooking_workshop_id, 1, 120.00, 'confirmed'), -- Alice books 1 ticket for Cooking Workshop
        (alice_id, startup_pitch_id, 3, 75.00, 'cancelled');     -- Alice cancels booking for Startup Pitch
    
    -- Customer Bob bookings
    INSERT INTO bookings (user_id, event_id, quantity, total_amount, status) VALUES 
        (bob_id, tech_summit_id, 1, 199.99, 'confirmed'),       -- Bob books 1 ticket for Tech Summit
        (bob_id, new_year_gala_id, 2, 300.00, 'confirmed'),     -- Bob books 2 tickets for New Year Gala
        (bob_id, jazz_night_id, 2, 90.00, 'confirmed'),         -- Bob books 2 tickets for Jazz Night
        (bob_id, cooking_workshop_id, 1, 120.00, 'confirmed');   -- Bob books 1 ticket for Cooking Workshop
    
    -- Admin test booking (admins can also book events)
    INSERT INTO bookings (user_id, event_id, quantity, total_amount, status) VALUES 
        (admin_id, startup_pitch_id, 5, 125.00, 'confirmed');   -- Admin books 5 tickets for Startup Pitch
    
    -- Generate tickets for confirmed bookings
    -- Note: ticket_code will be auto-generated by the trigger
    
    -- Tickets for Alice's confirmed bookings
    INSERT INTO tickets (booking_id) 
    SELECT id FROM bookings WHERE user_id = alice_id AND status = 'confirmed' AND event_id = tech_summit_id
    UNION ALL
    SELECT id FROM bookings WHERE user_id = alice_id AND status = 'confirmed' AND event_id = tech_summit_id; -- 2 tickets
    
    INSERT INTO tickets (booking_id) 
    SELECT id FROM bookings WHERE user_id = alice_id AND status = 'confirmed' AND event_id = jazz_night_id
    UNION ALL
    SELECT id FROM bookings WHERE user_id = alice_id AND status = 'confirmed' AND event_id = jazz_night_id
    UNION ALL
    SELECT id FROM bookings WHERE user_id = alice_id AND status = 'confirmed' AND event_id = jazz_night_id
    UNION ALL
    SELECT id FROM bookings WHERE user_id = alice_id AND status = 'confirmed' AND event_id = jazz_night_id; -- 4 tickets
    
    INSERT INTO tickets (booking_id) 
    SELECT id FROM bookings WHERE user_id = alice_id AND status = 'confirmed' AND event_id = cooking_workshop_id; -- 1 ticket
    
    -- Tickets for Bob's confirmed bookings
    INSERT INTO tickets (booking_id) 
    SELECT id FROM bookings WHERE user_id = bob_id AND status = 'confirmed' AND event_id = tech_summit_id; -- 1 ticket
    
    INSERT INTO tickets (booking_id) 
    SELECT id FROM bookings WHERE user_id = bob_id AND status = 'confirmed' AND event_id = new_year_gala_id
    UNION ALL
    SELECT id FROM bookings WHERE user_id = bob_id AND status = 'confirmed' AND event_id = new_year_gala_id; -- 2 tickets
    
    INSERT INTO tickets (booking_id) 
    SELECT id FROM bookings WHERE user_id = bob_id AND status = 'confirmed' AND event_id = jazz_night_id
    UNION ALL
    SELECT id FROM bookings WHERE user_id = bob_id AND status = 'confirmed' AND event_id = jazz_night_id; -- 2 tickets
    
    INSERT INTO tickets (booking_id) 
    SELECT id FROM bookings WHERE user_id = bob_id AND status = 'confirmed' AND event_id = cooking_workshop_id; -- 1 ticket
    
    -- Tickets for Admin's confirmed bookings
    INSERT INTO tickets (booking_id) 
    SELECT id FROM bookings WHERE user_id = admin_id AND status = 'confirmed' AND event_id = startup_pitch_id
    UNION ALL
    SELECT id FROM bookings WHERE user_id = admin_id AND status = 'confirmed' AND event_id = startup_pitch_id
    UNION ALL
    SELECT id FROM bookings WHERE user_id = admin_id AND status = 'confirmed' AND event_id = startup_pitch_id
    UNION ALL
    SELECT id FROM bookings WHERE user_id = admin_id AND status = 'confirmed' AND event_id = startup_pitch_id
    UNION ALL
    SELECT id FROM bookings WHERE user_id = admin_id AND status = 'confirmed' AND event_id = startup_pitch_id; -- 5 tickets

END $$;

-- Add some sample data scenarios for testing edge cases

-- Create a fully booked event (small capacity event with full bookings)
INSERT INTO events (title, description, venue, date_time, capacity, price, status) VALUES 
    (
        'Exclusive Wine Tasting', 
        'Limited seats for an exclusive wine tasting experience',
        'Private Wine Cellar',
        '2025-11-15 18:00:00+00',
        5,
        75.00,
        'active'
    )
ON CONFLICT DO NOTHING;

-- Book this event to full capacity using existing users
DO $$
DECLARE
    alice_id INTEGER;
    bob_id INTEGER;
    wine_tasting_id INTEGER;
BEGIN
    SELECT id INTO alice_id FROM users WHERE phone = '+1555000002';
    SELECT id INTO bob_id FROM users WHERE phone = '+1555000003';
    SELECT id INTO wine_tasting_id FROM events WHERE title = 'Exclusive Wine Tasting';
    
    -- Alice books 3 tickets
    INSERT INTO bookings (user_id, event_id, quantity, total_amount, status) VALUES 
        (alice_id, wine_tasting_id, 3, 225.00, 'confirmed');
    
    -- Bob books 2 tickets (fills remaining capacity)
    INSERT INTO bookings (user_id, event_id, quantity, total_amount, status) VALUES 
        (bob_id, wine_tasting_id, 2, 150.00, 'confirmed');
    
    -- Generate tickets for these bookings
    INSERT INTO tickets (booking_id) 
    SELECT id FROM bookings WHERE user_id = alice_id AND event_id = wine_tasting_id
    UNION ALL
    SELECT id FROM bookings WHERE user_id = alice_id AND event_id = wine_tasting_id
    UNION ALL
    SELECT id FROM bookings WHERE user_id = alice_id AND event_id = wine_tasting_id; -- 3 tickets for Alice
    
    INSERT INTO tickets (booking_id) 
    SELECT id FROM bookings WHERE user_id = bob_id AND event_id = wine_tasting_id
    UNION ALL
    SELECT id FROM bookings WHERE user_id = bob_id AND event_id = wine_tasting_id; -- 2 tickets for Bob

END $$;

COMMIT;

-- Display summary of created test data
DO $$
BEGIN
    RAISE NOTICE '=== TEST DATA SUMMARY ===';
    RAISE NOTICE 'Users created: 3 (1 admin, 2 customers)';
    RAISE NOTICE 'Events created: 6 (5 main events + 1 fully booked event)';
    RAISE NOTICE 'Bookings created: Multiple bookings with different scenarios';
    RAISE NOTICE 'Tickets generated: Auto-generated for all confirmed bookings';
    RAISE NOTICE '========================';
END $$;
