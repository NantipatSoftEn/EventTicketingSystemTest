import { Component, OnInit, ViewChild, inject, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router } from '@angular/router';
import { EventService, AuthService } from '../../../core/services';
import { Event, EventSearchFilter } from '../../../core/models';
import { EventCardComponent } from '../components/event-card.component';
import { EventSearchComponent } from '../components/event-search.component';
import { LoadingSpinnerComponent } from '../../../shared/components/ui/loading-spinner.component';
import { ErrorMessageComponent } from '../../../shared/components/ui/error-message.component';

@Component({
  selector: 'app-event-list',
  standalone: true,
  imports: [
    CommonModule,
    EventCardComponent,
    EventSearchComponent,
    LoadingSpinnerComponent,
    ErrorMessageComponent
  ],
  templateUrl: './event-list.page.html',
    <div class="min-h-screen bg-gray-50">
      <!-- Hero Section -->
      <div class="bg-gradient-to-r from-indigo-600 to-purple-700 text-white">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
          <div class="text-center">
            <h1 class="text-4xl md:text-6xl font-bold mb-4">
              Discover Amazing Events
            </h1>
            <p class="text-xl md:text-2xl text-indigo-100 max-w-3xl mx-auto">
              From concerts to conferences, find and book tickets for the events that matter to you
            </p>
          </div>
        </div>
      </div>

      <!-- Search and Events Section -->
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Search Component -->
        <app-event-search 
          #searchComponent
          (search)="onSearch($event)"
        ></app-event-search>

        <!-- Error Message -->
        @if (errorMessage()) {
          <app-error-message
            type="error"
            title="Error Loading Events"
            [message]="errorMessage()"
            (dismiss)="clearError()"
          ></app-error-message>
        }

        <!-- Loading State -->
        @if (isLoading()) {
          <app-loading-spinner
            size="lg"
            text="Loading events..."
            containerClass="py-16"
          ></app-loading-spinner>
        }

        <!-- Events Grid -->
        @if (!isLoading() && !errorMessage()) {
          @if (events().length > 0) {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              @for (event of events(); track event.id) {
                <app-event-card
                  [event]="event"
                  (bookNow)="onBookEvent($event)"
                ></app-event-card>
              }
            </div>
          } @else {
            <!-- No Events Found -->
            <div class="text-center py-16">
              <svg class="mx-auto h-24 w-24 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <h3 class="text-2xl font-medium text-gray-900 mb-2">No events found</h3>
              <p class="text-gray-600 mb-6">
                @if (hasActiveFilters()) {
                  Try adjusting your search criteria to find more events.
                } @else {
                  Check back later for upcoming events.
                }
              </p>
              @if (hasActiveFilters()) {
                <button
                  (click)="clearAllFilters()"
                  class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-indigo-600 bg-indigo-50 hover:bg-indigo-100 transition-colors duration-200"
                >
                  Clear all filters
                </button>
              }
            </div>
          }
        }
      </div>
    </div>
  `,
  styles: []
})
export class EventListPageComponent implements OnInit {
  private eventService = inject(EventService);
  private authService = inject(AuthService);
  private router = inject(Router);

  @ViewChild('searchComponent') searchComponent!: EventSearchComponent;

  events = signal<Event[]>([]);
  isLoading = signal<boolean>(true);
  errorMessage = signal<string | null>(null);
  currentFilter = signal<EventSearchFilter | null>(null);

  ngOnInit(): void {
    this.loadEvents();
  }

  loadEvents(filter?: EventSearchFilter): void {
    this.isLoading.set(true);
    this.errorMessage.set(null);
    this.currentFilter.set(filter || null);

    this.eventService.getEvents(filter).subscribe({
      next: (response) => {
        if (response.success) {
          this.events.set(response.data);
          this.searchComponent?.updateResultCount(response.data.length);
        } else {
          this.errorMessage.set(response.message || 'Failed to load events');
        }
        this.isLoading.set(false);
      },
      error: (error) => {
        console.error('Error loading events:', error);
        this.errorMessage.set('Failed to load events. Please try again.');
        this.isLoading.set(false);
      }
    });
  }

  onSearch(filter: EventSearchFilter): void {
    this.loadEvents(filter);
  }

  onBookEvent(event: Event): void {
    if (!this.authService.isAuthenticated()) {
      // Redirect to login with return URL
      this.router.navigate(['/login'], { 
        queryParams: { returnUrl: `/events/${event.id}` }
      });
      return;
    }

    // Navigate to event detail page for booking
    this.router.navigate(['/events', event.id]);
  }

  clearError(): void {
    this.errorMessage.set(null);
  }

  clearAllFilters(): void {
    this.searchComponent?.clearFilters();
  }

  hasActiveFilters(): boolean {
    const filter = this.currentFilter();
    return !!(filter?.query || filter?.venue || filter?.startDate || filter?.endDate);
  }
}
